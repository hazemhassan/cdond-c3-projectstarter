version: 2.1
orbs:
  slack: circleci/slack@4.10.1
commands:
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          command: |
            aws cloudformation delete-stack --stack-name prod-${CIRCLE_WORKFLOW_ID}
jobs:
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |   
             if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
             then
              # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
              curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
              # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
              curl https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
             fi
             # Here's where you will add some code to rollback on failure  
  configure_infrastructure:
     docker:
        - image: python:3.7-alpine3.11
     steps:
      - checkout
      - add_ssh_keys:
           fingerprints: ["26:06:80:ab:3f:c2:52:41:1f:d1:6e:de:62:9f:44:05"]
      - run:
         name: Insall dependancies
         command: |
          apk add --update ansible
      - run:
          name: configure server
          command:  |
            ansible-playbook -i inventory.txt .circleci/ansible/configure-server.yml
      
  create_infrastructure: 
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Create Cloudformation Stack
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
                --region us-east-1
  build-frontend:
   docker:
       - image: circleci/node:13.8.0
   steps:
       - checkout
       - restore_cache:
          keys: [frontend-build]
       - run:
          name: Lint frontend
          command: |
           cd frontend
           npm install
           npm run build
       - slack/notify:
          channel: abc
          event: fail
          template: basic_fail_1
  build-backend:
   docker:
       - image: circleci/node:13.8.0
   steps:
       - checkout
       - restore_cache:
          keys: [backend-build]
       - run:
          name: build backend
          command: |
           cd backend
           npm install
           npm run build
  test-frontend:
   docker:
       - image: circleci/node:13.8.0
   steps:
       - checkout
       - restore_cache:
          keys: [frontend-build]
       - run:
          name: Run frontend test
          command: |
           cd frontend
           npm install
           npm run test
  test-backend:
   docker:
       - image: circleci/node:13.8.0
   steps:
       - checkout
       - restore_cache:
          keys: [backend-build]
       - run:
          name: Run backend test
          command: |
           cd backend
           npm install
           npm run test
  scan-frontend:
   docker:
       - image: circleci/node:13.8.0
   steps:
       - checkout
       - restore_cache:
          keys: [frontend-build]
       - run:
          name: Scan frontend dependancies
          command: |
           cd frontend
           npm install
           npm audit fix --force
           npm audit --audit-level=critical || true
  scan-backend:
   docker:
       - image: circleci/node:13.8.0
   steps:
       - checkout
       - restore_cache:
          keys: [backend-build]
       - run:
          name: Scan backend dependancies
          command: |
           cd backend
           npm install
           npm audit fix --force
           npm audit --audit-level=critical || true
workflows:
  default:
    jobs:
      - create_infrastructure
      - configure_infrastructure
      - build-frontend
      - build-backend
      - test-frontend:
         requires: [build-frontend]
      - test-backend:
         requires: [build-backend]
      - scan-frontend:
         requires: [build-frontend]
      - scan-backend:
         requires: [build-backend]
